# -*- coding: utf-8 -*-
"""tutorial4_ph_2022.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p5H10jU4XOnKLc0rSPaUpaLb3I8z6xTp
"""

import pandas
import numpy as np

import matplotlib.pyplot as plt

df = pandas.read_csv('http://pogo.software/me4ml/tensile_strength.csv')

t = np.array(df['Temperature (deg C)'][:]) 
s = np.array(df['Ultimate tensile strength (Pa)'][:])

t_mean = np.mean(t)
t_std = np.std(t)

s_mean = np.mean(s)
s_std = np.std(s)

t_scale = (t-t_mean)/t_std
s_scale = (s-s_mean)/s_std

fig, ax = plt.subplots() 
plt.hist(s_scale) 
plt.show()

fig, ax = plt.subplots() 
plt.hist(t_scale) 
plt.show()

fig, ax = plt.subplots() 
plt.hist(s) 
plt.show()

scArray = np.array([[t_mean, s_mean],[t_std, s_std]]) 
np.savetxt('scaleParams.txt',scArray)

#download it from the Colab interface:
from google.colab import files 
files.download('scaleParams.txt')

loadedScales = np.loadtxt('scaleParams.txt')
print(scArray)
print(loadedScales)

npx = 200
npy = 200

x1line = np.linspace(0, 1, npx) 
x2line = np.linspace(0, 1, npy)

x1grid, x2grid = np.meshgrid(x1line, x2line) 

Xgrid = np.array([x1grid, x2grid]).reshape([2,npx*npy]).T



w = np.array([-1, -3]).reshape([1,2])
w0 = 1
g = np.matmul(w, Xgrid.T) + w0

g = np.reshape(g, [npx, npy])

yDiscr = (-x1line + 1) / 3


fig, ax = plt.subplots()
plt.contourf(x1line, x2line, g)
plt.plot(x1line, yDiscr)
plt.colorbar()
plt.xlim(0, 1)
plt.ylim(0, 1)

a1 = np.array([[1.3, -1, -3]])
a2 = np.array([[-2, 1, 2]])
a3 = np.array([[0.3, 0.1, -0.1]])
a4 = np.array([[0, -1, 1]])
a5 = np.array([[-0.2, 1.5, -1]])


#Ygrid is defined as the same as Xgrid, except it has 1 
#at the beginning - this therefore adds a column of ones to the left
Ygrid = np.concatenate([np.ones([npx * npy,1]), Xgrid],axis=1) 

#calculate each of the five functions as before
g1 = np.matmul(a1, Ygrid.T) 
g2 = np.matmul(a2, Ygrid.T) 
g3 = np.matmul(a3, Ygrid.T) 
g4 = np.matmul(a4, Ygrid.T) 
g5 = np.matmul(a5, Ygrid.T)


#combine all five functions together
gconc = np.concatenate([g1, g2, g3, g4, g5])


#find where the maximum value lies
omega=np.argmax(gconc,axis=0)

#result = numpy.where(arr == numpy.amax(arr))
#put back onto 2D grid so it can easily be plotted
omega = np.reshape(omega, [npx, npy]) 

fig, ax = plt.subplots()
plt.contourf(x1line, x2line, omega)

a1 = np.array([[1.3, -1, -3, -10]])
a2 = np.array([[-1,1.5,3,-1]])
a3 = np.array([[0.4, -0.1, -0.1, 3]])
a4 = np.array([[0.5, -1, 1, -0.1]])
a5 = np.array([[-0.2, 1.5, -1, 0.4]])


#Ygrid is defined as the same as Xgrid, except it has 1 
#at the beginning - this therefore adds a column of ones to the left
Ygrid = np.concatenate([np.ones([npx * npy,1]), Xgrid, np.array([Xgrid[:,0]*Xgrid[:,1]]).T],axis=1) 

#calculate each of the five functions as before
g1 = np.matmul(a1, Ygrid.T) 
g2 = np.matmul(a2, Ygrid.T) 
g3 = np.matmul(a3, Ygrid.T) 
g4 = np.matmul(a4, Ygrid.T) 
g5 = np.matmul(a5, Ygrid.T)
#combine all five functions together
gconc = np.concatenate([g1, g2, g3, g4, g5])

#find which of the columns is the largest
omega=np.argmax(gconc,axis=0)

omega = np.reshape(omega, [npx, npy]) 

fig, ax = plt.subplots()
plt.contourf(x1line, x2line, omega)